#!/usr/bin/env python3
import sys
import re
import os

VERSION = "1.0.1"
START_DATE = "2025-05-21"
VERSION_DATE = "2025-06-05"


def to_digits(digits_str: str):
    """Convert string to list of ints."""
    return [int(d) for d in digits_str]


def print_usage(file):
    basename = os.path.basename(sys.argv[0])
    print('usage: {} DIGITS...'.format(basename), file=file)
    print('Calculates various check digits.', file=file)


def print_version(file):
    basename = os.path.basename(sys.argv[0])
    print(
        '@(#)$Header: {} {} {}/{} yoshi389111 Exp $'.format(
            basename, VERSION, START_DATE, VERSION_DATE
        ),
        file=file
    )


def calculate_luhn_check_digit(digits_str: str) -> str:
    """Luhn algorithm."""
    digits = to_digits(digits_str)

    checksum = 0
    for i, d in enumerate(digits[::-1]):
        if i % 2 == 0:
            doubled = d * 2
            checksum += (doubled - 9) if doubled > 9 else doubled
        else:
            checksum += d

    check_digit = (10 - (checksum % 10)) % 10
    return str(check_digit)


def calculate_m10w21_check_digit(digits_str: str) -> str:
    """Modulus 10 with weights 2 and 1 (non-Luhn)"""
    digits = to_digits(digits_str)

    checksum = 0
    for i, d in enumerate(digits[::-1]):
        if i % 2 == 0:
            checksum += d * 2
        else:
            checksum += d

    check_digit = (10 - (checksum % 10)) % 10
    return str(check_digit)


def calculate_m10w31_check_digit(digits_str: str) -> str:
    """Modulus 10 with weights 3 and 1."""
    digits = to_digits(digits_str)

    checksum = 0
    for i, d in enumerate(digits[::-1]):
        if i % 2 == 0:
            checksum += d * 3
        else:
            checksum += d

    check_digit = (10 - (checksum % 10)) % 10
    return str(check_digit)


def calculate_m11w27_check_digit(digits_str: str) -> str:
    """Modulus 11 with weights 2 to 7 (repeating)"""
    digits = to_digits(digits_str)

    checksum = 0
    for i, d in enumerate(digits[::-1]):
        checksum += d * (i % 6 + 2)

    check_digit = (11 - (checksum % 11)) % 11 % 10
    return str(check_digit)


def calculate_m11w10_check_digit(digits_str: str) -> str:
    """Modulus 11 with weights 1 to n"""
    digits = to_digits(digits_str)

    checksum = 0
    for i, d in enumerate(digits[::-1]):
        checksum += d * ((i + 1) % 10)

    check_digit = (11 - (checksum % 11)) % 11 % 10
    return str(check_digit)


def calculate_isbn10_check_digit(digits_str: str) -> str:
    """
    old isbn-10 method.
    ISSN check digit can also be calculated with this method.
    """
    digits = to_digits(digits_str)

    checksum = 0
    for i, d in enumerate(digits[::-1]):
        checksum += d * (i + 2)

    check_digit = (11 - (checksum % 11)) % 11
    return str(check_digit) if check_digit < 10 else 'X'


def calculate_7dr_check_digit(digits_str: str) -> str:
    """7 divide remainder"""
    return str(int(digits_str) % 7)


def calculate_7dsr_check_digit(digits_str: str) -> str:
    """7 divide subtract remainder"""
    return str(7 - int(digits_str) % 7)


def calculate_9dr_check_digit(digits_str: str) -> str:
    """9 divide remainder"""
    return str(int(digits_str) % 9)


def calculate_9dsr_check_digit(digits_str: str) -> str:
    """9 divide subtract remainder"""
    return str(9 - int(digits_str) % 9)


def calculate_corporate_number_check_digit(digits_str: str) -> str:
    """corporate number in Japan method."""
    digits = to_digits(digits_str)

    checksum = 0
    for i, d in enumerate(digits[::-1]):
        if i % 2 == 0:
            checksum += d
        else:
            checksum += d * 2

    check_digit = 9 - (checksum % 9)
    return str(check_digit)


def check_all_checkdigit(digits: str):
    print()
    print('  digits: {}'.format(digits))
    print('--------  ------------------')
    print('    luhn: {}-{}'.format(digits, calculate_luhn_check_digit(digits)))
    print('  m10w21: {}-{}'.format(digits, calculate_m10w21_check_digit(digits)))
    print('  m10w31: {}-{}'.format(digits, calculate_m10w31_check_digit(digits)))
    print('  m11w27: {}-{}'.format(digits, calculate_m11w27_check_digit(digits)))
    print('  m11w10: {}-{}'.format(digits, calculate_m11w10_check_digit(digits)))
    print('  isbn10 / issn:')
    print('          {}-{}'.format(digits, calculate_isbn10_check_digit(digits)))
    print('     7DR: {}-{}'.format(digits, calculate_7dr_check_digit(digits)))
    print('    7DSR: {}-{}'.format(digits, calculate_7dsr_check_digit(digits)))
    print('     9DR: {}-{}'.format(digits, calculate_9dr_check_digit(digits)))
    print('    9DSR: {}-{}'.format(digits, calculate_9dsr_check_digit(digits)))
    if len(digits) == 12:
        # The check digit of Japanese Corporate Number is prepended.
        print('  Corporate Number in Japan:')
        print(
            '          {}-{}'.format(
                calculate_corporate_number_check_digit(digits), digits
            )
        )


def main():
    if len(sys.argv) < 2:
        print_usage(sys.stderr)
        sys.exit(1)

    if sys.argv[1] == '-v' or sys.argv[1] == '-V' or sys.argv[1] == '--version':
        print_version(sys.stdout)
        sys.exit(0)

    if sys.argv[1] == '-h' or sys.argv[1] == '--help':
        print_usage(sys.stdout)
        sys.exit(0)

    for arg in sys.argv[1:]:
        if re.fullmatch(r'[0-9]+', arg) is None:
            print('Invalid digits: {}'.format(arg), file=sys.stderr)
            sys.exit(1)
        check_all_checkdigit(arg)


if __name__ == "__main__":
    main()
